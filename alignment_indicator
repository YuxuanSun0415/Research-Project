from skimage.metrics import structural_similarity as ssim
from scipy.spatial.distance import dice
import numpy as np
import os

# 结果路径
RESULT_PATH = 'result'  
latest_step = "000000"  

# 读取配准结果
test_result_file = os.path.join(RESULT_PATH, f"test_step{latest_step}-pt.npy")

if not os.path.exists(test_result_file):
    raise FileNotFoundError(f"File not found: {test_result_file}")

pre_images_test = np.load(test_result_file)
print(f"Loaded {test_result_file}, shape: {pre_images_test.shape}")

# 读取原始测试数据
from utils import get_image_arrays
_, test_images, test_indices = get_image_arrays()

# 选择第一对 Moving 和 Fixed 图像
moving_idx = test_indices[0][0]  
fixed_idx = test_indices[1][0]   

# 获取配准前后的图像
moving_image = test_images[moving_idx, ...]  
fixed_image = test_images[fixed_idx, ...]    
registered_image = pre_images_test[0]  

# 计算均方误差 (MSE)
mse_value = np.mean((fixed_image - registered_image) ** 2)

# 计算结构相似性 (SSIM)
ssim_value = ssim(fixed_image, registered_image, data_range=fixed_image.max() - fixed_image.min())

# 计算 Dice 系数（ROI 计算时可用）
fixed_image_bin = (fixed_image > 0.5).astype(np.uint8)  # 二值化
registered_image_bin = (registered_image > 0.5).astype(np.uint8)

# 避免 Dice 计算时数组全为 0 的情况
if np.sum(fixed_image_bin) == 0 or np.sum(registered_image_bin) == 0:
    dice_value = 0.0
else:
    dice_value = 1 - dice(fixed_image_bin.flatten(), registered_image_bin.flatten())

## MSE 越小越好（说明误差越小）。
## SSIM 越接近 1 越好（说明结构更相似）。
## Dice 系数越接近 1 越好（ROI 之间重叠更好）qing
